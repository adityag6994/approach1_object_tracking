# Install Picoflexx Working with ROS
------------------------------------
source : readme file insie /sampleROS prakcage of ROS for PMD Picoflexx camera.
Which you'll find after unpacking the zipped file for your system. 

Before, using Picoflexx with ROS we need ROS!

Install ROS
------------
1. Install and configure ROS (e.g. Kinetic). (http://wiki.ros.org/kinetic/Installation/Ubuntu)
   - upper right button in Ubuntu --> `System Settings...` --> `Software & Updates` --> make sure the options
     (`restricted`, `universe` and `multiverse`) are selected.
   - add source:
	`$ sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'`
   - set the key:
	`$ sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 0xB01FA116`
   - make sure the system software is in the latest version:
	`$ sudo apt-get update`
   - install ROS:
	`$ sudo apt-get install ros-kinetic-desktop-full`
   - initialize rosdep:
	`$ sudo rosdep init`
	`$ rosdep update`
   - initialize environment
	`$ echo "source /opt/ros/kinetic/setup.bash" >> ~/.bashrc`
	`$ source ~/.bashrc`
   - install the commonly used plugins, e.g.:
	`$ sudo apt-get install python-rosinstall`
2. Creating a workspace for catkin. (http://wiki.ros.org/catkin/Tutorials/create_a_workspace)
   - create a catkin workspace:
	`$ mkdir -p ~/catkin_ws/src`
   - build the workspace:
	`$ cd ~/catkin_ws/`
	`$ catkin_make`
   - add the directory into ROS_PACKAGE_PATH environment variable:
	`$ echo $ROS_PACKAGE_PATH`
	/home/youruser/catkin_ws/src:/opt/ros/kinetic/share

Congratulation! you have ROS working now.

Copy the ROS package for camera inside ROS worksapce
----------------------------------------------------
 Copy `sampleROS` from `<path_of_extracted_royale_sdk>/libroyale-<version_number>-LINUX-64Bit/samples/cpp/` to `~/catkin_ws/src/sampleROS`.
 
 
 3. Add the executable flag to the camera_driver.cfg file
    `$ cd ~/catkin_ws/src/sampleROS/cfg`
    `$ chmod +x camera_driver.cfg`
4. Build the example
	`$ cd ~/catkin_ws/`
	`$ catkin_make`
5. Connect camera device
6. Source the setup.bash file
	`$ source devel/setup.bash`
7. Run ROS
	`$ roslaunch royale_in_ros camera_driver.launch`
8. Open a new Terminal to start rviz (a visualization for ROS)
	`$ rosrun rviz rviz`
   (in rviz)
   To add point_cloud topic:
	a. Set the `Fixed frame` to `royale_camera_link`;
	b. Add `PointCloud2` from `By display type`, set `Topic` to `royale_camera_driver/point_cloud` and
       set `Channel Name` to `z`;
	   Or add `PointCloud2` from `By topic` and set `Channel Name` to `z`.
   To add image topics:
	a. Add `Image` from `By display type` and set `Image Topic`;
	   Or add topics from `By topic`;
	b. The both image topics support for sub-topics `Camera` and `DepthCloud` too. Before adding these
       two sub-topics, the `Fixed frame` has to been set earlier.
9. Open a new Terminal to start Dynamic Reconfigure
	`$ rosrun rqt_reconfigure rqt_reconfigure`
   (in Dynamic Reconfigure)
	Choose `royale_camera`

Now you have Picoflexx working with ROS!

The next step is to use bring PCL into ROS and make it work.
